diff --git a/speex/doc/sampleenc.c b/speex/doc/sampleenc.c
index a0ec8b646..c02a4ea6c 100644
--- a/speex/doc/sampleenc.c
+++ b/speex/doc/sampleenc.c
@@ -26,6 +26,9 @@ int main(int argc, char **argv)
 
    inFile = argv[1];
    fin = fopen(inFile, "r");
+   if (fin == NULL) {
+      return -1;
+   }
 
    /*Initialization of the structure that holds the bits*/
    speex_bits_init(&bits);
diff --git a/speex/libspeexdsp/fftwrap.c b/speex/libspeexdsp/fftwrap.c
index 4573479d0..f1493fec6 100644
--- a/speex/libspeexdsp/fftwrap.c
+++ b/speex/libspeexdsp/fftwrap.c
@@ -44,6 +44,10 @@
 #ifdef FIXED_POINT
 static int maximize_range(spx_word16_t *in, spx_word16_t *out, spx_word16_t bound, int len)
 {
+   if (in == NULL || out == NULL)
+   {
+      return;
+   }
    int i, shift;
    spx_word16_t max_val = 0;
    for (i=0;i<len;i++)
@@ -68,6 +72,10 @@ static int maximize_range(spx_word16_t *in, spx_word16_t *out, spx_word16_t boun
 
 static void renorm_range(spx_word16_t *in, spx_word16_t *out, int shift, int len)
 {
+   if (in == NULL || out == NULL)
+   {
+      return;
+   }
    int i;
    for (i=0;i<len;i++)
    {
diff --git a/speex/libspeexdsp/jitter.c b/speex/libspeexdsp/jitter.c
index a9c0dd31e..ccc82e5b7 100644
--- a/speex/libspeexdsp/jitter.c
+++ b/speex/libspeexdsp/jitter.c
@@ -172,6 +172,10 @@ struct JitterBuffer_ {
  */
 static spx_int16_t compute_opt_delay(JitterBuffer *jitter)
 {
+   if (jitter == NULL)
+   {
+      return 0;
+   }
    int i;
    spx_int16_t opt=0;
    spx_int32_t best_cost=0x7fffffff;
diff --git a/speex/libspeexdsp/kiss_fftr.c b/speex/libspeexdsp/kiss_fftr.c
index 827e0b14d..49d337c38 100644
--- a/speex/libspeexdsp/kiss_fftr.c
+++ b/speex/libspeexdsp/kiss_fftr.c
@@ -260,6 +260,10 @@ void kiss_fftr2(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_scalar
 
 void kiss_fftri2(kiss_fftr_cfg st,const kiss_fft_scalar *freqdata,kiss_fft_scalar *timedata)
 {
+    if (st == NULL || st->substate == NULL || st->substate->inverse == NULL)
+    {
+        return;
+    }
    /* input buffer timedata is stored row-wise */
    int k, ncfft;
 
diff --git a/src/modules/dbus/iface-card.c b/src/modules/dbus/iface-card.c
index 32e892a70..2b339e4f0 100644
--- a/src/modules/dbus/iface-card.c
+++ b/src/modules/dbus/iface-card.c
@@ -316,7 +316,10 @@ static void handle_get_active_profile(DBusConnection *conn, DBusMessage *msg, vo
     pa_assert(conn);
     pa_assert(msg);
     pa_assert(c);
-
+    if (c->active_profile == NULL)
+    {
+        return;
+    }
     active_profile = pa_dbusiface_card_profile_get_path(pa_hashmap_get(c->profiles, c->active_profile->name));
     pa_dbus_send_basic_variant_reply(conn, msg, DBUS_TYPE_OBJECT_PATH, &active_profile);
 }
diff --git a/src/modules/dbus/iface-sample.c b/src/modules/dbus/iface-sample.c
index 51189196d..6554bebec 100644
--- a/src/modules/dbus/iface-sample.c
+++ b/src/modules/dbus/iface-sample.c
@@ -142,7 +142,10 @@ static void handle_get_index(DBusConnection *conn, DBusMessage *msg, void *userd
     pa_assert(conn);
     pa_assert(msg);
     pa_assert(s);
-
+    if (s->sample == NULL)
+    {
+        return;
+    }
     idx = s->sample->index;
 
     pa_dbus_send_basic_variant_reply(conn, msg, DBUS_TYPE_UINT32, &idx);
diff --git a/src/modules/echo-cancel/module-echo-cancel.c b/src/modules/echo-cancel/module-echo-cancel.c
index 3d63ea608..4ac2ada89 100644
--- a/src/modules/echo-cancel/module-echo-cancel.c
+++ b/src/modules/echo-cancel/module-echo-cancel.c
@@ -300,6 +300,10 @@ static int64_t calc_diff(struct userdata *u, struct snapshot *snapshot) {
     int64_t diff_time, buffer_latency;
     pa_usec_t plen, rlen, source_delay, sink_delay, recv_counter, send_counter;
 
+    if (u->sink_input == NULL || u->source_output == NULL) {
+        return -1;
+    }
+
     /* get latency difference between playback and record */
     plen = pa_bytes_to_usec(snapshot->plen, &u->sink_input->sample_spec);
     rlen = pa_bytes_to_usec(snapshot->rlen, &u->source_output->sample_spec);
@@ -1592,6 +1596,10 @@ static int canceller_process_msg_cb(pa_msgobject *o, int code, void *userdata, i
 
     u = msg->userdata;
 
+    if (u == NULL || u->source == NULL || u->source_output == NULL) {
+        return 0;
+    }
+
     switch (code) {
         case ECHO_CANCELLER_MESSAGE_SET_VOLUME: {
             pa_volume_t v = PA_PTR_TO_UINT(userdata);
diff --git a/src/modules/module-device-restore.c b/src/modules/module-device-restore.c
index 11dd1169d..756ce5dc6 100644
--- a/src/modules/module-device-restore.c
+++ b/src/modules/module-device-restore.c
@@ -133,6 +133,10 @@ static void save_time_callback(pa_mainloop_api*a, pa_time_event* e, const struct
 }
 
 static void trigger_save(struct userdata *u, pa_device_type_t type, uint32_t sink_idx) {
+    if (u == NULL)
+    {
+        return;
+    }
     pa_native_connection *c;
     uint32_t idx;
 
diff --git a/src/modules/module-equalizer-sink.c b/src/modules/module-equalizer-sink.c
index fdec9d54b..8d5d29da3 100644
--- a/src/modules/module-equalizer-sink.c
+++ b/src/modules/module-equalizer-sink.c
@@ -997,6 +997,9 @@ static const char* load_profile(struct userdata *u, size_t channel, char *name)
     pa_datum key, value;
     const size_t profile_size = CHANNEL_PROFILE_SIZE(u) * sizeof(float);
     key.data = name;
+    if (key.data == NULL) {
+        return NULL;
+    }
     key.size = strlen(key.data);
     if (pa_database_get(u->database, &key, &value) != NULL) {
         if (value.size == profile_size) {
diff --git a/src/modules/module-solaris.c b/src/modules/module-solaris.c
index d9f1d54ad..b3d3caa3b 100644
--- a/src/modules/module-solaris.c
+++ b/src/modules/module-solaris.c
@@ -190,7 +190,10 @@ static pa_usec_t sink_get_latency(struct userdata *u, pa_sample_spec *ss) {
 
     pa_assert(u);
     pa_assert(ss);
-
+    if (u->memchunk.memblock == NULL)
+    {
+        return r;
+    }
     if (u->fd >= 0) {
         r = pa_bytes_to_usec(get_playback_buffered_bytes(u), ss);
         if (u->memchunk.memblock)
diff --git a/src/modules/module-switch-on-port-available.c b/src/modules/module-switch-on-port-available.c
index de9c87092..58af1c7ee 100644
--- a/src/modules/module-switch-on-port-available.c
+++ b/src/modules/module-switch-on-port-available.c
@@ -58,6 +58,11 @@ static void card_info_new(struct userdata *u, pa_card *card) {
 }
 
 static void card_info_free(struct card_info *info) {
+    if (info == NULL || info->userdata == NULL)
+    {
+        return;
+    }
+
     pa_hashmap_remove(info->userdata->card_infos, info->card);
     pa_xfree(info);
 }
@@ -70,7 +75,10 @@ static bool profile_good_for_output(pa_card_profile *profile, pa_device_port *po
     pa_assert(profile);
 
     card = profile->card;
-
+    if (card == NULL || card->active_profile == NULL)
+    {
+        return;
+    }
     if (pa_safe_streq(card->active_profile->name, "off"))
         return true;
 
diff --git a/src/modules/rtp/rtp-native.c b/src/modules/rtp/rtp-native.c
index 86760a627..9963d8aeb 100644
--- a/src/modules/rtp/rtp-native.c
+++ b/src/modules/rtp/rtp-native.c
@@ -396,6 +396,10 @@ pa_rtpoll_item* pa_rtp_context_get_rtpoll_item(pa_rtp_context *c, pa_rtpoll *rtp
     item = pa_rtpoll_item_new(rtpoll, PA_RTPOLL_LATE, 1);
 
     p = pa_rtpoll_item_get_pollfd(item, NULL);
+    if (p == NULL)
+    {
+        return item;
+    }
     p->fd = c->fd;
     p->events = POLLIN;
     p->revents = 0;
diff --git a/src/pulsecore/filter/crossover.c b/src/pulsecore/filter/crossover.c
index dab34afce..8da468b96 100644
--- a/src/pulsecore/filter/crossover.c
+++ b/src/pulsecore/filter/crossover.c
@@ -24,6 +24,10 @@ void lr4_set(struct lr4 *lr4, enum biquad_type type, float freq)
 
 void lr4_process_float32(struct lr4 *lr4, int samples, int channels, float *src, float *dest)
 {
+	if (lr4 == NULL || src == NULL || dest == NULL) {
+		return;
+	}
+
 	float lx1 = lr4->x1;
 	float lx2 = lr4->x2;
 	float ly1 = lr4->y1;
diff --git a/src/pulsecore/protocol-esound.c b/src/pulsecore/protocol-esound.c
index cf0fe4fdf..f96b488fe 100644
--- a/src/pulsecore/protocol-esound.c
+++ b/src/pulsecore/protocol-esound.c
@@ -387,6 +387,10 @@ static int esd_proto_stream_play(connection *c, esd_proto_t request, const void
     pa_memchunk silence;
 
     connection_assert_ref(c);
+    if (c->options == NULL || c-options->default_sink == NULL)
+    {
+        return -1;
+    }
     pa_assert(data);
     pa_assert(length == (sizeof(int32_t)*2+ESD_NAME_MAX));
 
diff --git a/src/pulsecore/remap_mmx.c b/src/pulsecore/remap_mmx.c
index 9d0767183..0db616d54 100644
--- a/src/pulsecore/remap_mmx.c
+++ b/src/pulsecore/remap_mmx.c
@@ -103,6 +103,10 @@
 static void remap_mono_to_stereo_s16ne_mmx(pa_remap_t *m, int16_t *dst, const int16_t *src, unsigned n) {
     pa_reg_x86 temp, temp2;
 
+    if (dst == NULL || src == NULL) {
+        return;
+    }
+
     __asm__ __volatile__ (
         MONO_TO_STEREO(wd,4,15) /* do words to doubles */
         : "+r" (dst), "+r" (src), "=&r" (temp), "=&r" (temp2)
@@ -115,6 +119,10 @@ static void remap_mono_to_stereo_s16ne_mmx(pa_remap_t *m, int16_t *dst, const in
 static void remap_mono_to_stereo_any32ne_mmx(pa_remap_t *m, float *dst, const float *src, unsigned n) {
     pa_reg_x86 temp, temp2;
 
+    if (dst == NULL || src == NULL) {
+        return;
+    }
+    
     __asm__ __volatile__ (
         MONO_TO_STEREO(dq,3,7) /* do doubles to quads */
         : "+r" (dst), "+r" (src), "=&r" (temp), "=&r" (temp2)
diff --git a/src/pulsecore/remap_sse.c b/src/pulsecore/remap_sse.c
index 5c3b931f2..da7bf1709 100644
--- a/src/pulsecore/remap_sse.c
+++ b/src/pulsecore/remap_sse.c
@@ -102,6 +102,9 @@
 static void remap_mono_to_stereo_s16ne_sse2(pa_remap_t *m, int16_t *dst, const int16_t *src, unsigned n) {
     pa_reg_x86 temp, temp2;
 
+    if (dst == NULL || src == NULL) {
+        return;
+    }
     __asm__ __volatile__ (
         MONO_TO_STEREO(wd, 5, 31) /* do words to doubles */
         : "+r" (dst), "+r" (src), "=&r" (temp), "=&r" (temp2)
@@ -114,6 +117,9 @@ static void remap_mono_to_stereo_s16ne_sse2(pa_remap_t *m, int16_t *dst, const i
 static void remap_mono_to_stereo_any32ne_sse2(pa_remap_t *m, float *dst, const float *src, unsigned n) {
     pa_reg_x86 temp, temp2;
 
+    if (dst == NULL || src == NULL) {
+        return;
+    }
     __asm__ __volatile__ (
         MONO_TO_STEREO(dq, 4, 15) /* do doubles to quads */
         : "+r" (dst), "+r" (src), "=&r" (temp), "=&r" (temp2)
diff --git a/src/pulsecore/sconv_neon.c b/src/pulsecore/sconv_neon.c
index 11d94d207..285c6d18a 100644
--- a/src/pulsecore/sconv_neon.c
+++ b/src/pulsecore/sconv_neon.c
@@ -28,6 +28,9 @@
 #include <arm_neon.h>
 
 static void pa_sconv_s16le_from_f32ne_neon(unsigned n, const float *src, int16_t *dst) {
+    if (dst == NULL || src == NULL) {
+        return;
+    }
     unsigned i = n & 3;
 
     __asm__ __volatile__ (
@@ -57,6 +60,9 @@ static void pa_sconv_s16le_from_f32ne_neon(unsigned n, const float *src, int16_t
 }
 
 static void pa_sconv_s16le_to_f32ne_neon(unsigned n, const int16_t *src, float *dst) {
+    if (dst == NULL || src == NULL) {
+        return;
+    }
     unsigned i = n & 3;
     const float invscale = 1.0f / (1 << 15);
 
diff --git a/src/pulsecore/srbchannel.c b/src/pulsecore/srbchannel.c
index 4cdfaa732..c00fcb562 100644
--- a/src/pulsecore/srbchannel.c
+++ b/src/pulsecore/srbchannel.c
@@ -43,6 +43,10 @@ struct pa_ringbuffer {
 static void *pa_ringbuffer_peek(pa_ringbuffer *r, int *count) {
     int c = pa_atomic_load(r->count);
 
+    if (r->readindex < 0) {
+        return r->memory;
+    }
+
     if (r->readindex + c > r->capacity)
         *count = r->capacity - r->readindex;
     else
diff --git a/src/utils/padsp.c b/src/utils/padsp.c
index 9d1cb5cad..9c626ff5f 100644
--- a/src/utils/padsp.c
+++ b/src/utils/padsp.c
@@ -1561,6 +1561,10 @@ int __open_2(const char *filename, int flags) {
 static int mixer_ioctl(fd_info *i, unsigned long request, void*argp, int *_errno) {
     int ret = -1;
 
+    if (argp == NULL) {
+        return ret;
+    }
+
     switch (request) {
         case SOUND_MIXER_READ_DEVMASK :
             debug(DEBUG_LEVEL_NORMAL, __FILE__": SOUND_MIXER_READ_DEVMASK\n");

